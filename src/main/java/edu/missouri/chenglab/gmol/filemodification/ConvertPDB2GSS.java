package edu.missouri.chenglab.gmol.filemodification;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

/**
 * Convert .pdb files into .gss file for visualization
 * 
 * 
 * @author Tuan
 *
 */
public class ConvertPDB2GSS {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String pdbFile = "C:/Users/Tuan/workspace/Gmol/chr1_10kb_gm12878_list_0mb_10mb_1483058775167.pdb";
		String mappingFile = "C:/Users/Tuan/workspace/Gmol/chr1_10kb_gm12878_list_0mb_10mb_coordinate_mapping.txt";
		String outputFile = "C:/Users/Tuan/workspace/Gmol/chr1_10kb_gm12878_list_0mb_10mb_1483058775167.gss";
		
		ConvertPDB2GSS converter = new ConvertPDB2GSS();
		converter.convertToGSS(pdbFile, mappingFile, outputFile);
	}
	
	public void convertToGSS(String pdbFile, String mappingFile, String outputFile){
		try{
			double[][] coords = getCoords(pdbFile);
			Map<Integer, Integer> map = getIndexGenomicCoordMapping(mappingFile);
			printOutGSSFile(coords, map, outputFile);			
		}catch(Exception ex){
			ex.printStackTrace();
		}
	}
	
	/**
	 * 
	 * @param coords: coordinates of points
	 * @param outputFile
	 */	
	private void printOutGSSFile(double[][] coords, Map<Integer, Integer> map, String outputFile) throws Exception{
		PrintWriter pw = new PrintWriter(outputFile);
		pw.println("<sp>some_species</sp>");
		pw.println("<ens-chr>1</ens-chr>");
		pw.println("<lc-seq>unknown</lc-seq>");
		pw.println("<cs>1");
		
		pw.printf("<lt>%d</lt>\n", coords.length);
		double radius = 1.0;
		int res = detectResolution(map);
		for(int i = 0; i < coords.length; i++){
			pw.printf("<un %d>%.3f %.3f %.3f %.1f</un><seq>%d %d</seq>\n", 
					i+1, coords[i][0], coords[i][1], coords[i][2], radius, i*res + 1, i*res + res);
		}
		
		pw.println("</cs>");
		pw.close();
	}
	/**
	 * Given a mapping, detect the resolution, it is the gap repeated the most in the map
	 * @param map
	 * @return
	 */
	private int detectResolution(Map<Integer, Integer> map){
		int max = 0, res = 0, g, n = map.size();
		Map<Integer, Integer> count = new HashMap<Integer, Integer>();
		for(int i = 1; i < n; i++){
			g = map.get(i) - map.get(i - 1);
			if (!count.containsKey(g)) count.put(g,  0);
			count.put(g,  count.get(g) + 1);
			if (count.get(g) > max){
				max = count.get(g);
				res = g;
			}
		}
		
		return res;
	}
	
	/**
	 * 
	 * @param inputFile : pdb file generated by MOGEN or LorDG
	 * @return x[n][3] for n points with (x,y,z)
	 */
	private double[][] getCoords(String inputFile) throws Exception{
		
		int n = 0; //length
		//determine the number of atoms
		BufferedReader br = new BufferedReader(new FileReader(inputFile));
		String ln;
		while((ln = br.readLine()) != null){
			if (ln.startsWith("ATOM")){
				n++;
			}
		}
		br.close();
		
		double[][] coords = new double[n][3];
		br = new BufferedReader(new FileReader(inputFile));
		int i = 0;
		double x,y,z;
		while((ln = br.readLine()) != null){
			if (ln.startsWith("ATOM")){
				x = Double.parseDouble(ln.substring(30,38).trim());
				y = Double.parseDouble(ln.substring(38,46).trim());
				z = Double.parseDouble(ln.substring(46,54).trim());
				
				coords[i][0] = x;
				coords[i][1] = y;
				coords[i][2] = z;
				i++;
			}
		}		
		return coords;
	}
	
	/**
	 * 	
	 * @param inputFile: each line has format: genomic_coordinate index_in_model
	 * @return
	 */
	private Map<Integer, Integer> getIndexGenomicCoordMapping(String inputFile) throws Exception{
		
		Map<Integer, Integer> map = new HashMap<Integer, Integer>();
		
		BufferedReader br = new BufferedReader(new FileReader(new File(inputFile)));
		String ln, st[];
		int x,y;
		while((ln = br.readLine()) != null){
			st = ln.split("\\s+");
			x = Integer.parseInt(st[0]);
			y = Integer.parseInt(st[1]);
			map.put(y,x);//map index to genomic_coordinate
		}
		
		br.close();
		
		return map;
	}
	

}
